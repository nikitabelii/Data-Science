# -*- coding: utf-8 -*-
"""ProblemSet2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZQf_9aqAkm7fDRWLMeYP9P5niYA9qf17
"""

import numpy as np
import matplotlib.pyplot as plt
import base64
from io import BytesIO
from scipy.signal import convolve2d
from skimage import data, color, io
import IPython

import numpy as np
import matplotlib.pyplot as plt
import torch
from torchvision import datasets
from skimage.util import montage
!pip install wandb
import wandb as wb
from skimage.io import imread

import imageio as io

# Load an RGB image of your choice from a URL

def plot(x):
    fig, ax = plt.subplots()
    im = ax.imshow(x, cmap = 'gray')
    ax.axis('off')
    fig.set_size_inches(5, 5)
    plt.show()

image = io.imread("https://th.bing.com/th/id/OIP.HLuY60jzx5puuKjbqmWRRwHaEK?pid=ImgDet&rs=1")

plot(image)

image.shape

#Resize the image to 224x224

#(it didn't show the image with np.resize, so I used cv2)

import cv2

# Load the input image
input_image = cv2.imread('input_image.jpg')

# Specify the new size (width, height)
new_size = (224, 224)

# Resize the image
resized_image = cv2.resize(image, new_size)

# Save the resized image
cv2.imwrite('output_image.jpg', resized_image)
image = resized_image

image.shape

plot(resized_image)

#Show a grayscale copy

image = image[:,:,0]
image = image.astype(float)
image /= 255.0
plot(image)

image.shape

#Convolve with 10 random filters and show filters and features maps for each

a = np.matrix([[1,2,1],[0,0,0],[-1,-2,-1]])

f=a

x=image

f

f[2,2]

x2 = np.zeros(x.shape)

for i in range(1,x.shape[0]-1):
    for j in range(1,x.shape[1]-1):

        x2[i,j] = f[0,0] * x[i-1,j-1]  \
        +         f[0,1] * x[i-1,j]    \
        +         f[0,2] * x[i-1,j+1]  \
        +         f[1,0] * x[i,j-1]    \
        +         f[1,1] * x[i,j]      \
        +         f[1,2] * x[i,j+1]    \
        +         f[2,0] * x[i+1,j-1]  \
        +         f[2,1] * x[i+1,j]    \
        +         f[2,2] * x[i+1,j+1]

def conv2(x,f):
    x2 = np.zeros(x.shape)
    for i in range(1,x.shape[0]-1):
        for j in range(1,x.shape[1]-1):

            x2[i,j] = f[0,0] * x[i-1,j-1] \
            +         f[0,1] * x[i-1,j] \
            +         f[0,2] * x[i-1,j+1] \
            +         f[1,0] * x[i,j-1] \
            +         f[1,1] * x[i,j] \
            +         f[1,2] * x[i,j+1] \
            +         f[2,0] * x[i+1,j-1] \
            +         f[2,1] * x[i+1,j] \
            +         f[2,2] * x[i+1,j+1]

    return x2

a=np.matrix([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]])
# a=np.matrix([[1,2,1],[0,0,0],[-1,-2,-1]])
# a=np.matrix([[1,1,1],[1,1,1],[1,1,1]])
# a=5*np.random.random((3,3))-5*np.random.random((3,3))

a

z = conv2(x,a)

plot(x)

plot(z)

x

np.random.random((3,3))

a = 2*np.random.random((3,3))-1

a

a = np.random.random((3,3))

a

for i in range(10):
    a = 2*np.random.random((3,3))-1
    plot(a)
    z=conv2(x,a)
    plot(z)

